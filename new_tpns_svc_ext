#!/usr/bin/env ruby

require 'xcodeproj'

def process_add_push_service_extension_target(project_path, application_target = "")

  project_path = project_path
  project = Xcodeproj::Project.open(project_path)
  # puts "Project: #{project.path}"

  tpnsServiceTarget = project.new_target(:app_extension, "TPNSService", :ios, "10.0")

  tpnsServiceGroup = project.main_group.find_subpath("TPNSService", true)
  tpnsServiceGroup.set_source_tree('<group>')

  tpnsExtensionLibGroup = project.main_group.find_subpath("TPNSService/TPNSExtensionLib", true)
  tpnsExtensionLibGroup.set_source_tree('<group>')

  # 新建文件引用
  tpnsServiceGroup.new_reference("TPNSService/NotificationService.h")
  tpnsServiceGroup.new_reference("TPNSService/NotificationService.m")

  tpnsExtensionLibGroup.new_reference("TPNSService/TPNSExtensionLib/XGExtension.h")
  tpnsExtensionLibGroup.new_reference("TPNSService/TPNSExtensionLib/libXGExtension.a")

  # 给target配置文件引用
  notificationServiceM = tpnsServiceGroup.find_file_by_path("TPNSService/NotificationService.m")

  tpnsExtensionLibFile = tpnsExtensionLibGroup.find_file_by_path("TPNSService/TPNSExtensionLib/libXGExtension.a")

  tpnsServiceTarget.add_file_references([notificationServiceM])

  tpnsServiceTargetFrameworksBuildPhase = tpnsServiceTarget.frameworks_build_phase
  # 添加libXGExtension.a引用
  tpnsServiceTargetFrameworksBuildPhase.add_file_reference(tpnsExtensionLibFile)

  # 删除无用的Foundation.framework
  tpnsServiceTargetFrameworksBuildPhase.files_references.each do |file|
      if file.real_path.to_s.end_with?("Foundation.framework")
          tpnsServiceTargetFrameworksBuildPhase.remove_file_reference(file)
      end
  end

  tpnsServiceTarget.build_configuration_list.set_setting("INFOPLIST_FILE", "TPNSService/Info.plist")

  # 先把第一个 target 赋值给 main_target
  main_target = project.targets.first()

  # 遍历所有target，找到 product_type 为 application 的 target，把它作为main_target
  project.targets.each do |targetItem|
      if targetItem.product_type.to_s.end_with?("application")
          main_target = targetItem
          break
      end
  end
  main_target.add_dependency(tpnsServiceTarget)

  # 获取主target的 bundle id，新增.TPNSService后缀之后，设置给 TPNSService Extension
  main_target_bundle_id = main_target.build_configuration_list.get_setting("PRODUCT_BUNDLE_IDENTIFIER")['Debug']
  extension_bundle_id = "#{ main_target_bundle_id + ".TPNSService" }"
  tpnsServiceTarget.build_configuration_list.set_setting("PRODUCT_BUNDLE_IDENTIFIER", extension_bundle_id)

  # 设置Developer Team，和主target的一致
  main_target_developer_team = project.targets.first.build_configuration_list.get_setting("DEVELOPMENT_TEAM")['Debug']
  tpnsServiceTarget.build_configuration_list.set_setting("DEVELOPMENT_TEAM", main_target_developer_team)

  tpnsServiceTarget.build_configuration_list.set_setting("PRODUCT_NAME", "$(TARGET_NAME)")
  tpnsServiceTarget.build_configuration_list.set_setting("TARGETED_DEVICE_FAMILY", "1,2")
  tpnsServiceTarget.build_configuration_list.set_setting("SKIP_INSTALL", "YES")

  # 设置LD_RUNPATH_SEARCH_PATHS为固定值
  search_path_arr = Array["$(inherited)", "@executable_path/Frameworks", "@executable_path/../../Frameworks"]
  tpnsServiceTarget.build_configuration_list.set_setting("LD_RUNPATH_SEARCH_PATHS", search_path_arr)

  # 设置LIBRARY_SEARCH_PATHS
  library_search_path = Array["$(inherited)", "$(PROJECT_DIR)/TPNSService/TPNSExtensionLib"]
  tpnsServiceTarget.build_configuration_list.set_setting("LIBRARY_SEARCH_PATHS", library_search_path)

  # 新增名称为"Embed App Extensions"的Copy File Phase，Destination为PlugIns(13)
  embed_app_extensions_copy_build_phase = main_target.new_copy_files_build_phase("Embed App Extensions")
  embed_app_extensions_copy_build_phase.dst_subfolder_spec = "13"

  # 向Embed App Extensions Copy File Build Phase中新增TPNSService.appex引用
  productsGroup = project.main_group.find_subpath("Products", true)
  productsGroup.files.each do |file|
      if file.real_path.to_s.end_with?(".appex")
          embed_app_extensions_copy_build_phase.add_file_reference(file)
      end
  end

  project.save

end

begin
  project_path = ARGV.first()

  process_add_push_service_extension_target(project_path)

  puts "New TPNSService Extension Success"

  rescue StandardError => e
      puts "TPNSService Extension Script Excute Error is #{e.inspect}"

end

